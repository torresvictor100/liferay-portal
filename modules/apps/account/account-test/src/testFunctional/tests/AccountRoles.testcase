@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This test asserts the account manager can assign the organizations to the account by default."
	@priority = "4"
	test AccountManagersCanAssignOrganizationtoAccountbyDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given add user useramsn as Account Manager for AM Account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("And add 2 organizations") {
			JSONOrganization.addOrganization(organizationName = "Account Org1");

			JSONOrganization.addOrganization(organizationName = "Account Org2");
		}

		task ("When the Account Manager useramsn assign the Account Org1 to AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.assignOrganizations(
				accountName = "AM Account",
				assigneeName = "Account Org1");
		}

		task ("Then only the Account Org1 displays in the Organizations list for AM Account") {
			LexiconEntry.viewEntryName(rowEntry = "Account Org1");

			LexiconEntry.viewNoEntry(rowEntry = "Account Org2");
		}
	}

	@description = "This test asserts the account manager can remove the organizations from the account by default."
	@priority = "4"
	test AccountManagersCanRemoveOrganizationfromAccountbyDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given assign the Organization Account Org1 to Account AM Account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			JSONOrganization.addOrganization(organizationName = "Account Org1");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "AM Account",
				organizationName = "Account Org1");
		}

		task ("And add user useramsn as Account Manager") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("When the Account Manager useramsn remove the Account Org1 from AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

			Accounts.removeOrganizationAsAssignee(assigneeName = "Account Org1");
		}

		task ("Then only the AM Organization displays in the Organizations list for AM Account") {
			LexiconEntry.viewNoEntry(rowEntry = "Account Org1");

			LexiconEntry.viewEntryName(rowEntry = "AM Organization");
		}
	}

	@description = "This test assert the account manager can view account organizations by default."
	@priority = "4"
	test AccountManagersCanViewOrganizationsbyDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given add 2 organizations and assign one to an account") {
			JSONOrganization.addOrganization(organizationName = "Account Org1");

			JSONOrganization.addOrganization(organizationName = "Company Org");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "AM Account",
				organizationName = "Account Org1");
		}

		task ("And add user useramsn as Account Manager") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("When the account manager navigates into the Organizations tab of AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Organizations");
		}

		task ("Then the account manager should be able to see the organization listed in that account") {
			Navigator.viewActivatedNavTab(navTab = "Organizations");

			LexiconEntry.viewNoEntry(rowEntry = "Company Org");

			AssertTextNotPresent(value1 = "There are no organizations associated with this account.");

			AssertElementPresent(locator1 = "Icon#PLUS");

			for (var orgName : list "AM Organization,Account Org1") {
				LexiconEntry.viewEntryName(rowEntry = "${orgName}");

				AssertElementPresent(
					key_assigneeName = "${orgName}",
					locator1 = "Icon#REMOVE_ASSIGNEE");
			}
		}
	}

	@description = "This test assert the account manager can view account users by default."
	@priority = "4"
	test AccountManagersCanViewUsersbyDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given an account with an account user assigned") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "AM Account",
				userEmailAddress = "userfn1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");
		}

		task ("And a company user is added") {
			JSONUser.addUser(
				userEmailAddress = "usereano@liferay.com",
				userFirstName = "userfnno",
				userLastName = "userlnno",
				userScreenName = "usersnno");
		}

		task ("And add user useramsn as Account Manager") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("When the account manager navigates into the User tab of AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");
		}

		task ("Then the account manager should be able to see the user listed in that account") {
			Navigator.viewActivatedNavTab(navTab = "Users");

			LexiconEntry.viewNoEntry(rowEntry = "userfn userln");

			AssertTextNotPresent(value1 = "There are no users associated with this account.");

			LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

			LexiconEntry.viewEntryMenu(rowEntry = "userfn1 userln1");

			AssertElementPresent(locator1 = "Icon#PLUS");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Add Account Role permissions for an account can add account roles."
	@priority = "4"
	test CanAddAccountRolesWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("When this user is granted permissions to Update account entry View account role tab and Add account role for Account Name") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			for (var resourceActionIndex : list "UPDATE,ADD_ACCOUNT_ROLE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role",
					roleType = "account");
			}

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can add account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Role");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Role");
		}
	}

	@description = "Use case for LPS-142654. This test asserts that a user with the correct permissions is able to assign a user to an account role."
	@priority = "3"
	test CanAssignUsersToAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given one account and two account users are created and one user is granted permissions to access the Account Admin portlet") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			for (var userNumber : list "1,2") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Name",
					userEmailAddress = "userea${userNumber}@liferay.com",
					userFirstName = "userfn${userNumber}",
					userLastName = "userln${userNumber}",
					userScreenName = "usersn${userNumber}");
			}

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("When the user with access permissions is given an account role wih permissions to update an account, view existing users and account roles, and assign account roles in an Account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Assign Account Roles");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES,VIEW_USERS") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Assign Account Roles",
					roleType = "account");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ASSIGN_USERS",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Assign Account Roles",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaRolesTab(
				accountRoleTitle = "Assign Account Roles",
				assigneeName = "userfn1 userln1");
		}

		task ("Then the user can assign an account role to another user and the role will be shown in the Users table") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaRolesTab(
				accountRoleTitle = "Assign Account Roles",
				assigneeName = "userfn2 userln2");

			Navigator.gotoBack();

			Navigator.gotoNavTab(navTab = "Users");

			LexiconTable.viewTableEntryInfo(
				columnName = "lfr-account-roles",
				tableEntry = "userfn2",
				tableEntryInfo = "Assign Account Roles");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Define Permission can define owned account role permissions."
	@priority = "4"
	test CanDefinePermissionsforAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And user is assigned a business account and prepare an Owned account role for testing") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");

			Accounts.addOwnedAccountRole(accountRoleTitle = "New Account Role");
		}

		task ("When this user is granted permissions to Define Account Role Permission") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Define Permissions Role");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Define Permissions Role",
					roleType = "account");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "DEFINE_PERMISSIONS",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Define Permissions Role",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Define Permissions Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then user can define permissions and group scope permissions in owned Account Roles") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Define Permissions",
				rowEntry = "New Account Role");

			Accounts.definePermissions(
				key_navItem = "Accounts",
				key_subItem = "Accounts",
				permissionKey = "ACCOUNTS_RESOURCE_PERMISSIONS_ACCOUNT_ENTRY_VIEW",
				permissionNavigationKey = "PERMISSIONS_NAVITEM_SUBITEM");

			AssertElementPresent(
				key_permissionDefinitionValue = "View",
				key_permissionNavigationValue = "Accounts",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

			Accounts.defineGroupScopePermissions(
				key_navItem = "Account Management",
				permissionKey = "ACCOUNTS_APPLICATION_PERMISSIONS_VIEW",
				permissionNavigationKey = "PERMISSIONS_NAVITEM");

			AssertElementPresent(
				key_permissionDefinitionValue = "View",
				key_permissionNavigationValue = "Account Management",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Delete Account Role permissions for an account can Delete account roles."
	@priority = "4"
	test CanDeleteAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet Update account entry, View account role tab") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Access Account Permission");
			}
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("When this user is granted permissions to Delete account role for Account Name") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "DELETE",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can delete account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.deleteOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewNoEntry(rowEntry = "Account Specific Role");
		}
	}

	@description = "This is a use case for LPS-151552. This asserts saving edits in one permissions tab in Account Roles does not clear related permissions from the other tab."
	@priority = "4"
	test CanSavePermissionsWithoutDeletingOthers {
		task ("Given an account role is created") {
			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			Role.add(roleTitle = "New Account Role");
		}

		task ("When a permission is saved in 'Define Permissions' tab and another related permission is saved in 'Define Group Scope Permissions' tab") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_ENTRY",
				resourceName = "com.liferay.blogs",
				roleTitle = "New Account Role",
				roleType = "account");

			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			LexiconEntry.gotoEntry(rowEntry = "New Account Role");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");

			Type(
				locator1 = "RolesPermissionsNavigation#SEARCH_FIELD",
				value1 = "Blogs");

			AssertClick(
				locator1 = "RolesPermissionsNavigation#SITE_ADMIN_APPLICATIONS_BLOGS",
				value1 = "Blogs");

			Check(locator1 = "RolesPermissions#SITE_ADMIN_CONTENT_BLOGS_RESOURCE_PERMISSIONS_BLOGS_ENTRIES_SUBSCRIBE_CHECKBOX");

			PortletEntry.save();

			Alert.viewSuccessMessage();
		}

		task ("Then both tabs should assert the correct permissions") {
			Navigator.gotoNavTab(navTab = "Define Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Add Entry",
				permissionNavigationValue = "Blogs > Blog Entries:");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Subscribe",
				permissionNavigationValue = "Blogs > Blog Entries:");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Update Account Role permissions for an account can update account roles."
	@priority = "4"
	test CanUpdateAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("And add owned account role with Update account entry, View account role tab permissions ") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role",
					roleType = "account");
			}
		}

		task ("When this user is granted permissions to Update account role for Account Name") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can update account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.updateOwnedAccountRole(
				accountRoleTitle = "Account Specific Role",
				accountRoleTitleEdit = "Account Specific Role Edit");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Specific Role Edit");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with View Account Roles permissions for an account can only view and cannot do other actions to those roles. It also asserts that a user only has this permissions to the account he has the role in."
	@priority = "4"
	test CanViewAccountRolesWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of two business accounts") {
			for (var accountNum : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account Name ${accountNum}",
					accountEntryType = "Business");

				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name ${accountNum}");

				Accounts.assignUsers(
					accountName = "Account Name ${accountNum}",
					assigneeName = "userfn1");
			}
		}

		task ("When this user is granted permissions to Update account entry and View account roles for Account Name 1") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role1");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role1",
					roleType = "account");
			}

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role1",
				accountUserName = "userfn1 userln1");
		}

		task ("And user is granted permissions to only Update an account entry for Account Name 2") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role2");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Account Specific Role2",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role2",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can view account roles in Account Name 1") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Specific Role1");
		}

		task ("and this user cannot do any other actions to these account roles") {
			AssertElementNotPresent(locator1 = "Button#PLUS");

			LexiconEntry.viewNoEntryMenu(rowEntry = "Account Specific Role1");
		}

		task ("and this user cannot view account roles in Account Name 2") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			AssertElementNotPresent(
				key_tab = "Roles",
				locator1 = "NavTab#ACTIVE_TAB_LINK");
		}
	}

}