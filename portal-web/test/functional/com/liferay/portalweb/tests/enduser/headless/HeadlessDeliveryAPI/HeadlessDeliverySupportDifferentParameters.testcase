@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		BlogPostingAPI.deleteAllBlogPostings();

		JSONDepot.deleteDepot(depotName = "Test Depot Name");
	}

	@priority = "4"
	test CanReceiveABodyWithAssetLibraryKeyOnlyInResponse {
		property portal.acceptance = "true";

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("Given a content structure created in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdminInAssetLibrary(depotId = "${assetLibraryId}");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("Given a structured content is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			HeadlessWebcontentAPI.createStructuredContentInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("When with curl I request GET getAssetLibraryContentElementsPage with assetLibraryId and fields=content.assetLibraryKey") {
			var response = ContentElementAPI.getAssetLibraryContentElementsByDifferentParameters(
				assetLibraryId = "${assetLibraryId}",
				fieldValue = "content.assetLibraryKey",
				parameter = "fields");
		}

		task ("Then in a response I receive a body with assetLibraryKey only") {
			ContentElementAPI.assertResponseHasABodyWithAssetLibraryKeyOnly(
				expectedValue = "{content={assetLibraryKey=Test Depot Name}}",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanReceiveCorrectValueWithProfileURLFieldInResponse {
		property portal.acceptance = "true";

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("Given a Web Content Folder created") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with curl I request GET getAssetLibraryStructuredContentFoldersPage with assetLibraryId and nestedFields = profileURL") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersWithDifferentParameters(
				assetLibraryId = "${assetLibraryId}",
				parameter = "nestedFields",
				parameterValue = "profileURL");
		}

		task ("Then in a response I receive a with profileURL field values in the creator field have appeared") {
			var actualValue = JSONUtil.getWithJSONPath("${response}", "$..creator.profileURL");

			TestUtils.assertEquals(
				actual = "${actualValue}",
				expected = "/web/test");
		}
	}

	@priority = "4"
	test CanReceiveIdFieldValuesOnlyInResponse {
		property portal.acceptance = "true";

		task ("Given a blog-posting created") {
			var blogPostingId = BlogPostingAPI.getIdOfCreatedBlogPosting(
				articleBody = "ArticleBody",
				headline = "Headline");
		}

		task ("When with curl I request GET getSiteBlogPostingsPage with siteId and restrictFields equal all fields except id field") {
			var response = BlogPostingAPI.getBlogPostingsbyDifferentParameters(
				parameter = "restrictFields",
				restrictFieldsValue = "aggregateRating,alternativeHeadline,articleBody,creator,customFields,dateCreated,dateModified,datePublished,description,encodingFormat,externalReferenceCode,friendlyUrlPath,headline,image,keywords,numberOfComments,relatedContents,renderedContents,siteId,taxonomyCategoryBriefs,x-class-name,facets,actions");
		}

		task ("Then in a response I receive a with id field values only") {
			BlogPostingAPI.assertResponseHasIdFieldValueOnly(
				expectedValue = "{id=${blogPostingId}}",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanReceiveIdFieldValuesOnlyInResponseForIndividualElement {
		property portal.acceptance = "true";

		task ("Given a document of a site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				filePath = "${filePath}");
		}

		task ("When with curl I request getDocument with fields=id") {
			var response = DocumentAPI.getDocumentsByDifferentParameters(
				documentId = "${documentId}",
				parameter = "fields",
				parameterValue = "id");
		}

		task ("Then in a response I received an id value only") {
			var actualValue = JSONUtil.getWithJSONPath("${response}", "$");

			TestUtils.assertEquals(
				actual = "${actualValue}",
				expected = "{id=${documentId}}");
		}
	}

	@priority = "4"
	test CanReceiveTitleFieldValuesOnlyInResponseForIndividualElement {
		property portal.acceptance = "true";

		task ("Given a document of a site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				filePath = "${filePath}");
		}

		task ("When with curl I request getDocument with restrictFields equal all fields except title field") {
			var response = DocumentAPI.getDocumentsByDifferentParameters(
				documentId = "${documentId}",
				parameter = "restrictFields",
				parameterValue = "actions,adaptedImages,assetLibraryKey,contentUrl,creator,customFields,dateCreated,dateModified,description,documentFolderId,documentType,encodingFormat,externalReferenceCode,fileExtension,id,keywords,numberOfComments,relatedContents,renderedContents,siteId,sizeInBytes,taxonomyCategoryBriefs");
		}

		task ("Then in a response I receive a body with title field values only") {
			var actualValue = JSONUtil.getWithJSONPath("${response}", "$");

			TestUtils.assertEquals(
				actual = "${actualValue}",
				expected = "{title=Document_1.txt}");
		}
	}

}