definition {

	macro _curlTaxonomyKeywords {
		var portalURL = JSONCompany.getPortalURL();

		if (isSet(assetLibraryId)) {
			var api = "asset-libraries/${assetLibraryId}/keywords";
		}
		else if (isSet(keywordId)) {
			var api = "keywords/${keywordId}";
		}
		else {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "${groupName}");

			var api = "sites/${siteId}/keywords";
		}

		if (isSet(parameter)) {
			var api = StringUtil.add("${api}", "?${parameter}=${parameterValue}", "");
		}

		var curl = '''
			${portalURL}/o/headless-admin-taxonomy/v1.0/${api} \
			-u test@liferay.com:test \
			-H Content-Type: application/json \
		''';

		return "${curl}";
	}

	macro _curlTaxonomyVocabulary {
		var portalURL = JSONCompany.getPortalURL();

		if (isSet(assetLibraryId)) {
			var api = "asset-libraries/${assetLibraryId}/taxonomy-vocabularies";
		}
		else {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "${groupName}");

			var api = "sites/${siteId}/taxonomy-vocabularies";
		}

		if (isSet(externalReferenceCode)) {
			var apiWithErc = "by-external-reference-code/${externalReferenceCode}";

			var api = StringUtil.add("${api}", "${apiWithErc}", "/");
		}

		if (isSet(filterValue)) {
			var api = StringUtil.add("${api}", "?filter=${filterValue}", "");
		}

		if (isSet(parameter)) {
			var api = StringUtil.add("${api}", "?${parameter}=${parameterValue}", "");
		}

		var curl = '''
			${portalURL}/o/headless-admin-taxonomy/v1.0/${api} \
			-u test@liferay.com:test \
			-H Content-Type: application/json \
		''';

		return "${curl}";
	}

	macro assertInFacetsWithCorrectValue {
		Variables.assertDefined(parameterList = "${expectedValue},${taxonomyVocabularyId}");

		var actualValue = JSONUtil.getWithJSONPath("${responseToParse}", "$.facets..facetValues[?(@.term=='${taxonomyVocabularyId}' && @.numberOfOccurrences==${expectedValue})].numberOfOccurrences");

		TestUtils.assertEquals(
			actual = "${actualValue}",
			expected = "${expectedValue}");
	}

	macro assertProperVocabularyTotalCount {
		Variables.assertDefined(parameterList = "${expectedTotalCount}");

		var response = TaxonomyVocabularyAPI.filterTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			filterValue = "${filterValue}");

		var actualTotalCount = TaxonomyVocabularyAPI.getElementOfCreatedVocabulary(
			element = "$..['totalCount']",
			responseToParse = "${response}");

		TestUtils.assertEquals(
			actual = "${actualTotalCount}",
			expected = "${expectedTotalCount}");
	}

	macro assertResponseHasNameFieldValueOnly {
		var actualValue = JSONUtil.getWithJSONPath("${responseToParse}", "$.items");

		TestUtils.assertEquals(
			actual = "${actualValue}",
			expected = "${expectedValue}");
	}

	macro createAssetLibraryWithKeyWords {
		Variables.assertDefined(parameterList = "${assetLibraryId},${name}");

		var curl = TaxonomyVocabularyAPI._curlTaxonomyKeywords(assetLibraryId = "${assetLibraryId}");
		var body = '''-d {"name": "${name}"}''';

		var curl = StringUtil.add("${curl}", "${body}", " ");

		var response = JSONCurlUtil.post("${curl}");

		return "${response}";
	}

	macro createTaxonomyVocabulary {
		Variables.assertDefined(parameterList = "${name}");

		if (!(isSet(externalReferenceCode))) {
			var externalReferenceCode = "";
		}

		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			groupName = "${groupName}");
		var body = '''-d {
				"name": "${name}",
				"externalReferenceCode": "${externalReferenceCode}"
			}''';

		var curl = StringUtil.add("${curl}", "${body}", " ");

		var response = JSONCurlUtil.post("${curl}");

		return "${response}";
	}

	macro deleteTaxonomyVocabularyByErc {
		Variables.assertDefined(parameterList = "${externalReferenceCode}");

		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			externalReferenceCode = "${externalReferenceCode}",
			groupName = "${groupName}");

		JSONCurlUtil.delete("${curl}");
	}

	macro filterTaxonomyVocabulary {
		Variables.assertDefined(parameterList = "${filterValue}");

		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			filterValue = "${filterValue}",
			groupName = "${groupName}");

		var response = JSONCurlUtil.get("${curl}");

		return "${response}";
	}

	macro getAssetLibraryKeywordsWithDifferentParameters {
		var curl = TaxonomyVocabularyAPI._curlTaxonomyKeywords(
			assetLibraryId = "${assetLibraryId}",
			keywordId = "${keywordId}",
			parameter = "${parameter}",
			parameterValue = "${parameterValue}");

		var response = JSONCurlUtil.get("${curl}");

		return "${response}";
	}

	macro getElementOfCreatedVocabulary {
		Variables.assertDefined(parameterList = "${responseToParse},${element}");

		var elementValue = JSONUtil.getWithJSONPath("${responseToParse}", "${element}");

		return "${elementValue}";
	}

	macro getTaxonomyVocabularyByErc {
		Variables.assertDefined(parameterList = "${externalReferenceCode}");

		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			externalReferenceCode = "${externalReferenceCode}",
			groupName = "${groupName}");

		var response = JSONCurlUtil.get("${curl}");

		return "${response}";
	}

	macro getTaxonomyVocabularyWithDifferentParameters {
		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			groupName = "${groupName}",
			parameter = "${parameter}",
			parameterValue = "${parameterValue}");

		var response = JSONCurlUtil.get("${curl}");

		return "${response}";
	}

	macro updateTaxonomyVocabularyByErc {
		Variables.assertDefined(parameterList = "${externalReferenceCode},${name}");

		var body = '''-d {"name": "${name}"}''';

		if (isSet(externalReferenceCodeInBody)) {
			var body = '''-d {"name": "${name}","externalReferenceCode": "${externalReferenceCodeInBody}"}''';
		}

		var curl = TaxonomyVocabularyAPI._curlTaxonomyVocabulary(
			assetLibraryId = "${assetLibraryId}",
			externalReferenceCode = "${externalReferenceCode}",
			groupName = "${groupName}");

		var curl = StringUtil.add("${curl}", "${body}", " ");

		var response = JSONCurlUtil.put("${curl}");

		return "${response}";
	}

}